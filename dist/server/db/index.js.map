{"version":3,"sources":["../../../src/server/db/index.js"],"names":["loginQuery","payload","username","login","query","postBusinessQuery","hashedPass","name","address","type","sector","contact","telephone","email","helpBefore","postBusiness","getBusinessesQuery","getBusinesses","getQuestionsQuery","getQuestions","getResponsesQuery","baseQuery","business_id","getResponses","generateResponsesInsertValuePlaceholders","response","idx","generateResponsesInsertValues","businessId","question_id","postResponsesQuery","responses","map","join","concat","postResponses","getResourcesQuery","topic_id","getResources"],"mappings":"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","file":"index.js","sourcesContent":["import pool from './pool';\n\nexport const loginQuery = payload => [\n  'SELECT * FROM businesses WHERE username = $1',\n  [payload.username],\n];\n\nexport const login = payload =>\n  pool.query(...loginQuery(payload));\n\nexport const postBusinessQuery = payload => [\n  'INSERT INTO businesses(username, password, name, address, type, sector, contact, telephone, email, help_before) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, username',\n  [\n    payload.username,\n    payload.hashedPass,\n    payload.name,\n    payload.address,\n    payload.type,\n    payload.sector,\n    payload.contact,\n    payload.telephone,\n    payload.email,\n    payload.helpBefore,\n  ],\n];\n\nexport const postBusiness = payload =>\n  pool.query(...postBusinessQuery(payload));\n\nexport const getBusinessesQuery = query => (\n  query.username\n  ? ['SELECT * FROM businesses WHERE username = $1', [query.username]]\n  : ['SELECT * FROM businesses']\n);\n\nexport const getBusinesses = query =>\n  pool.query(...getBusinessesQuery(query));\n\nexport const getQuestionsQuery = () => [\n  `SELECT * FROM questions\n   INNER JOIN topics ON questions.topic_id = topics.id`,\n];\n\nexport const getQuestions = () =>\n  pool.query(...getQuestionsQuery());\n\nexport const getResponsesQuery = (query) => {\n  const baseQuery = `SELECT * FROM interests\n      INNER JOIN businesses ON interests.business_id = businesses.id\n      INNER JOIN questions ON interests.question_id = questions.id\n      INNER JOIN topics ON questions.topic_id = topics.id`;\n  if (query.business_id) {\n    return [`${baseQuery} WHERE business_id = $1`, [query.business_id]];\n  }\n  if (query.type) {\n    return [`${baseQuery} WHERE businesses.type = $1`, [query.type]];\n  }\n  return [baseQuery];\n};\n\nexport const getResponses = query =>\n  pool.query(...getResponsesQuery(query));\n\nexport const generateResponsesInsertValuePlaceholders = (response, idx) =>\n  `($${(idx * 3) + 1}, $${(idx * 3) + 2}, $${(idx * 3) + 3})`;\n\nexport const generateResponsesInsertValues = businessId => response =>\n    [businessId, response.question_id, response.response];\n\nexport const postResponsesQuery = payload => [\n  `INSERT INTO interests (business_id, question_id, response) VALUES\n    ${payload.responses.map(generateResponsesInsertValuePlaceholders).join(',')}`,\n  [[].concat(...payload.responses.map(generateResponsesInsertValues(payload.business_id)))],\n];\n\nexport const postResponses = payload =>\n pool.query(...postResponsesQuery(payload));\n\nexport const getResourcesQuery = (query) => {\n  const baseQuery = `SELECT * FROM resources INNER JOIN topics\n   ON resources.topic_id = topics.id`;\n  return query.topic_id\n    ? [`${baseQuery} WHERE topic_id = $1`, [query.topic_id]]\n    : [baseQuery];\n};\n\nexport const getResources = query =>\n  pool.query(...getResourcesQuery(query));\n"]}